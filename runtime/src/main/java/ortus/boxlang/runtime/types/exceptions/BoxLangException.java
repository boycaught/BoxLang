/**
 * [BoxLang]
 *
 * Copyright [2023] [Ortus Solutions, Corp]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ortus.boxlang.runtime.types.exceptions;

import java.lang.annotation.Native;

/**
 * This exception is thrown when a cast can't be done on any type
 */
public class BoxLangException extends RuntimeException {

	/**
	 * Detailed message from the CFML interpreter or specified in a cfthrow tag. When the exception is generated by BoxLang (and not cfthrow), the
	 * message can contain HTML formatting and can help determine which tag threw the exception.
	 */
	public String	detail			= "";
	/**
	 * Type: Exception type, as specified in cfcatch.
	 *
	 * - application: catches application exceptions
	 * - database: catches database exceptions
	 * - template: catches BoxLang page exceptions
	 * - security: catches security exceptions
	 * - object: catches object exceptions
	 * - missingInclude: catches missing include file exceptions
	 * - expression: catches expression exceptions
	 * - lock: catches lock exceptions
	 * - custom_type: catches the specified custom exception type that is defined in a cfthrow tag
	 * - searchengine: catches Solr search engine exceptions
	 * - any: catches all exception types
	 */
	public String	type			= "application";
	// TODO:
	public String	tagContext		= "";

	// TODO: Refactor most of these into sub classes
	/**
	 * Applies to type = "database". Native error code associated with exception. Database drivers typically provide error codes to diagnose failing
	 * database operations. Default value is -1.
	 */
	public String	NativeErrorCode	= "";
	/**
	 * Applies to type = "database". SQLState associated with exception. Database drivers typically provide error codes to help diagnose failing database
	 * operations. Default value is 1.
	 */
	public String	SQLState		= "";
	/**
	 * Applies to type = "database". The SQL statement sent to the data source.
	 */
	public String	Sql				= "";
	/**
	 * Applies to type ="database". The error message as reported by the database driver.
	 */
	public String	queryError		= "";
	/**
	 * Applies to type= "database". If the query uses the cfqueryparam tag, query parameter name-value pairs.
	 */
	public String	where			= "";
	/**
	 * Applies to type = "expression". Internal expression error number.
	 */
	public String	ErrNumber		= "";
	/**
	 * Applies to type = "missingInclude". Name of file that could not be included.
	 */
	public String	MissingFileName	= "";
	/**
	 * Applies to type = "lock". Name of affected lock (if the lock is unnamed, the value is "anonymous").
	 */
	public String	LockName		= "";
	/**
	 * Applies to type = "lock". Operation that failed (Timeout, Create Mutex, or Unknown).
	 */
	public String	LockOperation	= "";
	/**
	 * Applies to type = "custom". String error code.
	 */
	public String	ErrorCode		= "";
	/**
	 * Applies to type = "application" and "custom". Custom error message; information that the default exception handler does not display.
	 */
	public String	ExtendedInfo	= "";

	/**
	 * Constructor
	 *
	 * @param message Why the cast can't be done
	 */
	public BoxLangException( String message ) {
		this( message, "", "application", null );
	}

	public BoxLangException( String message, Throwable cause ) {
		this( message, "", "application", cause );
	}

	public BoxLangException( String message, String detail, String type, Throwable cause ) {
		super( message );
		if ( cause != null ) {
			initCause( cause );
		}
	}
}
