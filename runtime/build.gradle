import java.text.SimpleDateFormat
import java.util.Date


plugins {
    id "java"
    // Apply the application plugin to add support for building a CLI application in Java.
	// This produces the distributions and scripts for any OS
	id "application"
	// For source code formatting
	id "com.diffplug.spotless" version "6.20.0"
}

/**
 * Project Properties
 */
group = 'ortus.boxlang'
version = '1.0.0'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

/**
 * Repositories for dependencies in order
 */
repositories {
    mavenLocal()
	mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
    // Testing Dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:31.1-jre'
	implementation 'org.apache.commons:commons-lang3:3.13.0'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
	implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '2.0.7'
}

/**
 * Source Code Formatting
 */
spotless {
    java {
		target fileTree( "." ) {
            include "**/*.java"
            exclude "**/build/**", "bin/**"
        }
        eclipse().configFile( "../workbench/ortus-java-style.xml" )
    }
}


/**
 * Influence the Java compiler
 */
tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
	options.debug()
}

/**
 * Application Build
 */
application {
    // Define the main class for the application.
    mainClass = 'ortus.boxlang.runtime.BoxRunner'
}

/**
 * Control the Jar naming schema
 */
jar {
    archiveBaseName = 'ortus-boxlang-runtime'
    archiveVersion =  "${version}"
// 	manifest {
//       attributes 'Main-Class': 'com.example.main.Application'
//    }
}

/**
 * Copy runtime dependencies to build/runtime
 * Useful for testing and deebugging
 */
task getDependencies( type: Copy ) {
  from sourceSets.main.runtimeClasspath
  into 'build/dependencies/'
}

/**
 * Javadoc Task
 */
javadoc {
	//include 'ortus/boxlang/addition/**'
	//exclude 'ortus/boxlang/subtraction/**'
}

/**
 * Test Task Influence
 */
tasks.named( 'test' ) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/**
 * Custom tasks to run in the `build` task lifecycle
 */
 build.finalizedBy( javadoc )
