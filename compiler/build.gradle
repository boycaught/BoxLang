
plugins {
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
	// This produces the distributions and scripts for any OS
	id 'application'

	id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
	id 'java-library'
	id 'antlr'
}

/**
 * Project Properties
 */
group = 'ortus.boxlang'
version = '1.0.0'
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

def antlrGeneratedParserPackage = "ortus.boxlang.parser"
def generatedSrcDir = "build/generated-src"
def antlrGeneratedParserBaseDir = "$generatedSrcDir/antlr/main"
def antlrGeneratedParserPackageDir = antlrGeneratedParserPackage.replaceAll("\\.", "/")
def antlrGrammarDir = "src/main/antlr"

sourceSets.main.java.srcDirs += "$antlrGeneratedParserBaseDir"
sourceSets.main.kotlin.srcDirs += "$antlrGeneratedParserBaseDir"

/**
 * Repositories for dependencies in order
 */
repositories {
    mavenLocal()
	mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
    // Testing Dependencies
//    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
//	testImplementation "org.mockito:mockito-core:5.+"
//	testImplementation "com.google.truth:truth:1.+"

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:31.1-jre'

	antlr "org.antlr:antlr4:$antlrVersion"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.antlr:antlr4-runtime:$antlrVersion"
	implementation "com.strumenta.kolasu:kolasu-core:$kolasuVersion"
	testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

/**
 * Influence the Java compiler
 */
tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
	options.debug()
}

/**
 * Application Build
 */
application {
    // Define the main class for the application.
    // mainClass = 'boxlang.runtime.Bootstrap'
}

/**
 * Control the Jar naming schema
 */
jar {
    archiveBaseName = 'ortus-boxlang-compiler'
    archiveVersion =  "${version}"
// 	manifest {
//       attributes 'Main-Class': 'com.example.main.Application'
//    }
}

/**
 * Copy runtime dependencies to build/runtime
 * Useful for testing and debugging
 */
task getDependencies( type: Copy ) {
  from sourceSets.main.runtimeClasspath
  into 'build/dependencies/'
}

/**
 * Javadoc Task
 */
javadoc {
	//include 'ortus/boxlang/addition/**'
	//exclude 'ortus/boxlang/subtraction/**'
}

/**
 * Test Task Influence
 */
//tasks.named( 'test' ) {
//    // Use JUnit Platform for unit tests.
//    useJUnitPlatform()
//}

/**
 * Custom tasks to run in the `build` task lifecycle
 */
 build.finalizedBy( javadoc )

compileJava {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.main.java
}

compileTestJava {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.test.java
	dependsOn compileJava
}

compileKotlin {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.main.java, sourceSets.main.kotlin
	kotlinOptions.jvmTarget = "$jvmVersion"
	dependsOn generateGrammarSource
}

compileTestKotlin {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.test.java, sourceSets.test.kotlin
	kotlinOptions.jvmTarget = "$jvmVersion"
	dependsOn compileKotlin
}

generateGrammarSource {
	inputs.files fileTree(antlrGrammarDir).include('*.g4')
	maxHeapSize = "256m"
	arguments += ['-package', antlrGeneratedParserPackage]
	arguments += ['-listener', '-visitor']
	outputDirectory = file("$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir")
}

clean {
	delete generatedSrcDir
}

test {
	testLogging {
		showStandardStreams = true
	}
	systemProperties.putIfAbsent("testboxdir", testboxDir)
	systemProperties.putIfAbsent("contentboxdir", contentboxDir)
	systemProperties.putIfAbsent("coldboxdir", coldboxDir)
	dependsOn compileKotlin, compileTestKotlin
}
