plugins {
	id 'java'
	// Apply the application plugin to add support for building a CLI application in Java.
	// This produces the distributions and scripts for any OS
	id 'application'

	// Parser + Compiler
	id 'java-library'
	id 'antlr'

	// For source code formatting
	id "com.diffplug.spotless" version "6.20.0"
}

/**
 * Project Properties
 */
group = 'ortus.boxlang'
version = '1.0.0'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

def antlrGeneratedParserPackage = "ortus.boxlang.parser"
def generatedSrcDir = "build/generated-src"
def antlrGeneratedParserBaseDir = "$generatedSrcDir/antlr/main"
def antlrGeneratedParserPackageDir = antlrGeneratedParserPackage.replaceAll("\\.", "/")
def antlrGrammarDir = "src/main/antlr"

sourceSets.main.java.srcDirs += "$antlrGeneratedParserBaseDir"

/**
 * Repositories for dependencies in order
 */
repositories {
	mavenLocal()
	mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
	// Testing Dependencies
//    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
//	testImplementation "org.mockito:mockito-core:5.+"
//	testImplementation "com.google.truth:truth:1.+"

	// This dependency is used by the application.
	//implementation 'com.google.guava:guava:31.1-jre'

	antlr "org.antlr:antlr4:$antlrVersion"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.antlr:antlr4-runtime:$antlrVersion"
	implementation "com.strumenta.kolasu:kolasu-core:$kolasuVersion"
	implementation "commons-io:commons-io:2.13.0"
	implementation 'org.apache.commons:commons-text:1.10.0'
	implementation 'commons-cli:commons-cli:1.5.0'
	implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.4'
	implementation 'org.slf4j:slf4j-api:2.0.7'
	implementation 'org.slf4j:slf4j-simple:2.0.7'


	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.apache.commons:commons-lang3:3.13.0'
}

/**
 * Source Code Formatting
 */
spotless {
    java {
		target fileTree( "." ) {
            include "**/*.java"
            exclude "**/build/**", "bin/**"
        }
        eclipse().configFile( "../workbench/ortus-java-style.xml" )
    }
}

/**
 * Influence the Java compiler
 */
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.debug()
}

/**
 * Application Build
 */
application {
	// Define the main class for the application.
	// mainClass = 'ortus.boxlang.runtime.BoxRunner'
}

/**
 * Control the Jar naming schema
 */
jar {
	archiveBaseName = 'ortus-boxlang-compiler'
	archiveVersion = "${version}"
// 	manifest {
//       attributes 'Main-Class': 'com.example.main.Application'
//    }
}

/**
 * Copy runtime dependencies to build/runtime
 * Useful for testing and debugging
 */
task getDependencies(type: Copy) {
	from sourceSets.main.runtimeClasspath
	into 'build/dependencies/'
}

/**
 * Javadoc Task
 */
javadoc {
	//include 'ortus/boxlang/addition/**'
	//exclude 'ortus/boxlang/subtraction/**'
}

/**
 * Test Task Influence
 */
//tasks.named( 'test' ) {
//    // Use JUnit Platform for unit tests.
//    useJUnitPlatform()
//}

/**
 * Custom tasks to run in the `build` task lifecycle
 */
build.finalizedBy(javadoc)

compileJava {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.main.java
	dependsOn generateGrammarSource,  generateTestGrammarSource
}

compileTestJava {
	sourceCompatibility = "$jvmVersion"
	targetCompatibility = "$jvmVersion"
	source sourceSets.test.java
	dependsOn compileJava, generateTestGrammarSource
}

generateGrammarSource {
	inputs.files fileTree(antlrGrammarDir).include('*.g4')
	maxHeapSize = "256m"
	arguments += ['-package', antlrGeneratedParserPackage]
	arguments += ['-listener', '-visitor']
	outputDirectory = file("$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir")
}

generateTestGrammarSource {
	inputs.files fileTree(antlrGrammarDir).include('*.g4')
	maxHeapSize = "256m"
	arguments += ['-package', antlrGeneratedParserPackage]
	arguments += ['-listener', '-visitor']
	outputDirectory = file("$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir")
}

clean {
	delete generatedSrcDir
}

test {
	testLogging {
		showStandardStreams = true
	}
	systemProperties.putIfAbsent("testboxdir", testboxDir)
	systemProperties.putIfAbsent("contentboxdir", contentboxDir)
	systemProperties.putIfAbsent("coldboxdir", coldboxDir)
	dependsOn compileJava, compileTestJava
}

/**
 * Install the CFML dependencies for the parser tests via CommandBox
 */
task installCommandBoxDependencies(type: Exec) {
	// Set the command to execute your operating system binary
	commandLine 'box', 'install'
	workingDir = project.projectDir
}
