import java.text.SimpleDateFormat
import java.util.Date


plugins {
    id "java"
    // Apply the application plugin to add support for building a CLI application in Java.
	// This produces the distributions and scripts for any OS
	id "application"
	id 'antlr'
	// For source code formatting
	id "com.diffplug.spotless" version "6.25.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
	// task to check for dependency updates
	id 'com.github.ben-manes.versions' version '0.51.0'
}

/**
 * Project Properties
 */
group = 'ortus.boxlang'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

/**
 * ANTLR Properties
 */
def antlrGeneratedParserPackage = "ortus.boxlang.parser.antlr"
def generatedSrcDir = "build/generated-src"
def antlrGeneratedParserBaseDir = "$generatedSrcDir/antlr/main"
def antlrGeneratedParserPackageDir = antlrGeneratedParserPackage.replaceAll("\\.", "/")
def antlrGrammarDir = "src/main/antlr"

sourceSets {
    main {
        resources {
            srcDirs = [ 'src/main/resources' ]
            include '**/*.properties'
			include '**/*.class'
			include '**/*.jar'
            include '**/*.json'
			include '**/*.bx*'
			include '**/*.cf*'
            include '**/META-INF/services/*'
        }
    }
}

// Add ANTLR generated sources to the main source set
sourceSets.main.java.srcDirs += "$antlrGeneratedParserBaseDir"

/**
 * Repositories for dependencies in order
 */
repositories {
    mavenLocal()
	mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
    // Testing Dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"
	testImplementation 'commons-cli:commons-cli:1.6.0'

	// Antlr
	antlr "org.antlr:antlr4:$antlrVersion"

	// Implementation Dependencies
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation "commons-io:commons-io:2.15.1"
	// https://mvnrepository.com/artifact/com.github.javaparser/javaparser-symbol-solver-core
	implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jr/jackson-jr-all
	implementation 'com.fasterxml.jackson.jr:jackson-jr-all:2.16.1'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jr/jackson-jr-annotation-support
	implementation 'com.fasterxml.jackson.jr:jackson-jr-annotation-support:2.16.1'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api:2.0.11'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
	implementation 'org.slf4j:slf4j-jdk14:2.0.11'

	// MOVE TO BOXLANG WEB PROJECT
	// https://mvnrepository.com/artifact/io.undertow/undertow-core/2.3.10.Final
	implementation 'io.undertow:undertow-core:2.3.10.Final'
}

/**
 * Project Wide Helper functions
 */
project.ext.bumpVersion = { boolean major = false, boolean minor = false, boolean patch = false ->

	def propertiesFile = file( '../gradle.properties' );
	def properties = new Properties();

	properties.load( propertiesFile.newDataInputStream() )
	def versionTarget = major ? 0 : minor ? 1 : 2

	def currentVersion = properties.getProperty( 'version' )
	def versionParts = currentVersion.split( '\\.' )
	def newPathVersion = versionParts[ versionTarget ].toInteger() + 1
	def newVersion = '';

	if( patch ){
		newVersion = "${versionParts[ 0 ]}.${versionParts[ 1 ]}.${newPathVersion}"
	} else if( minor ){
		newVersion = "${versionParts[ 0 ]}.${newPathVersion}.${versionParts[ 2 ]}"
	} else if( major ){
		newVersion = "${newPathVersion}.${versionParts[ 1 ]}.${versionParts[ 2 ]}"
	}

	properties.setProperty( 'version', newVersion )
	properties.store( propertiesFile.newWriter(), null )

	println "Bumped version from ${currentVersion} to ${newVersion}"
}

/**
 * Influence the Java compiler
 */
tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
	options.debug()
}

/**
 * Application Build
 */
application {
    // Define the main class for the application.
    mainClass = 'ortus.boxlang.runtime.BoxRunner'
}

/**
 * Control the Jar naming schema
 */
jar {
    archiveBaseName = 'ortus-boxlang'
    archiveVersion =  "${version}"
 	manifest {
       attributes 'Main-Class': 'ortus.boxlang.runtime.BoxRunner'
    }
}

shadowJar {
	exclude 'com/ibm/icu/**'
	manifest {
		attributes 'Description': 'This is the Ortus BoxLang Distribution JAR'
	}
	minimize {
		exclude(dependency('org.slf4j:slf4j-jdk14:.*'))
	}
}

/**
 * Copy dependencies to build/dependencies
 * Useful for testing and deebugging
 */
task getDependencies( type: Copy ) {
  from sourceSets.main.runtimeClasspath
  into 'build/dependencies/'
}

/**
 * Javadoc Task
 */
javadoc {
	options.addBooleanOption("Xdoclint:none", true)
	exclude '**/boxlang/parser/**'
}

/**
 * Test Task Influence
 */
tasks.named( 'test' ) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/**
 * Custom tasks to run in the `build` task lifecycle
 */
 build.finalizedBy( javadoc )

/**
 * Compile Java Customizations
 */
compileJava {
	source sourceSets.main.java
	// Generate the ANTLR parser before compiling
	dependsOn generateGrammarSource,  generateTestGrammarSource
}

task compileCoreModules( type: JavaCompile ) {
    source = files( [ 'src/main/resources/modules' ] ).asFileTree
    destinationDir = file( 'src/main/resources' )
    classpath = files( [ sourceSets.main.compileClasspath, sourceSets.main.output ] )
	dependsOn compileJava
}

/**
 * Compile Test Java Customizations
 */
compileTestJava {
	source sourceSets.test.java
	dependsOn compileJava, compileCoreModules,  generateTestGrammarSource
}

/**
 * ANTLR Generated Source
 */
generateGrammarSource {
	inputs.files fileTree( antlrGrammarDir ).include( '*.g4' )
	maxHeapSize = "256m"
	arguments += [ '-package', antlrGeneratedParserPackage ]
	arguments += [ '-listener', '-visitor' ]
	outputDirectory = file( "$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir" )
}

/**
 * ANTLR Generated Test Sources
 */
generateTestGrammarSource {
	inputs.files fileTree( antlrGrammarDir ).include( '*.g4' )
	maxHeapSize = "256m"
	arguments += [ '-package', antlrGeneratedParserPackage ]
	arguments += [ '-listener', '-visitor' ]
	outputDirectory = file( "$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir" )
}

/**
 * Test Task Customizations
 */
test {
	testLogging {
		showStandardStreams = true
	}
	systemProperties.putIfAbsent( "testboxdir", testboxDir)
	systemProperties.putIfAbsent( "contentboxdir", contentboxDir)
	systemProperties.putIfAbsent( "coldboxdir", coldboxDir)
	dependsOn compileJava, compileTestJava
	exclude '**/resources/**'
}

/****************************************************************
 * CUSTOM TASKS
 ****************************************************************/

/**
 * Source Code Formatting
 */
spotless {
    java {
		target fileTree( "." ) {
            include "**/*.java"
            exclude "**/build/**", "bin/**", "examples/**", "src/main/java/ortus/boxlang/runtime/testing/**"
        }
        eclipse().configFile( "workbench/ortus-java-style.xml" )
		toggleOffOn()
    }
}
spotlessJava {
  // other configurations
  dependsOn tasks.named( "compileCoreModules" )
}

/**
 * Generate the BIF Service Providers
 */
task generateBIFServiceProviders( type: JavaExec ) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'tools.BIFServiceProviderGenerator'
}
// Make the build task depend on your custom task
build.dependsOn generateBIFServiceProviders

/**
 * Generate the Component Service Providers
 */
task generateComponentServiceProviders( type: JavaExec ) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'tools.ComponentServiceProviderGenerator'
}
// Make the build task depend on your custom task
build.dependsOn generateComponentServiceProviders

/**
 * Install the CFML dependencies for the parser tests via CommandBox
 */
task installCommandBoxDependencies( type: Exec ) {
	// Set the command to execute your operating system binary
	commandLine 'box', 'install'
	workingDir = project.projectDir
}

/**
 * Custom task: clean the ANTLR generated sources
 */
clean {
	// Clean the ANTLR generated sources
	delete generatedSrcDir
}

/**
 * Bump the major version number
 */
task bumpMajorVersion {
	doLast{
		bumpVersion( true )
	}
}

/**
 * Bump the minor version number
 */
task bumpMinorVersion {
	doLast{
		bumpVersion( false, true )
	}
}

/**
 * Bump the patch version number
 */
task bumpPatchVersion {
	doLast{
		bumpVersion( false, false, true )
	}
}
