// Auto package creation according to file path on disk
package c_drive.projects.examples;

// BoxLang Auto Imports
import ortus.boxlang.runtime.context.TemplateContext;
import ortus.boxlang.runtime.interop.ClassInvoker;
import ortus.boxlang.runtime.loader.ClassLocator;
import ortus.boxlang.runtime.scopes.Key;
import ortus.boxlang.runtime.scopes.Key;
import ortus.boxlang.runtime.scopes.IScope;

// Classes Auto-Imported on all Templates and Classes by BoxLang
import java.time.LocalDateTime;
import java.time.Instant;
import java.lang.System;
import java.lang.String;
import java.lang.Character;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;

// Imports based on AST Tree
import ortus.boxlang.runtime.operators.EqualsEquals;
import ortus.boxlang.runtime.operators.Concat;

public class HelloWorld$cfm extends BaseTemplate {

  // Auto-Generated Singleton Helpers
  private static MockTemplate instance;

  private MockTemplate() {
    this.name = "HelloWorld";
    this.extension = "cfm";
    this.path = "c:/projects/examples";
    this.lastModified = "2023-07-26T17:45:16.669276";
    this.compiledOn = "2023-07-26T17:45:16.669276";
    // this.ast = ???
  }

  public static synchronized MockTemplate getInstance() {
		if ( instance == null ) {
			instance = new MockTemplate();
		}
		return instance;
  }

  /**
   * Each template must implement the invoke() method which executes the template
   *
   * @param context The execution context requesting the execution
   */
  public invoke( TemplateContext context ) throws Throwable {
    // Reference to the variables scope
    IScope variablesScope = context.getScopeLocal( Key.of( "variables" ) );

    // Case sensitive set
    variablesScope.put( Key.of( "system" ), JavaLoader.load( context, "java.lang.System" ) );

    // Every class (box|java) is represented as a ClassInvoker
    ClassInvoker oString = ClassLoader.load( context, "java.lang.String" );

    variablesScope.put(
       // Case insensitive set
       Key.of( "GREETING" ),

       // Invoke callsite
       oString.invokeConstructor(
         // Argument Values
         new Object[] { "Hello" }
       );
    );

    if( EqualsEquals.invoke( context, variablesScope.get( Key.of( "GREETING" ) ), "Hello" ) ) {


      Referencer.getAndInvoke(

				// Object
				Referencer.get(
					variablesScope.get( Key.of( "SYSTEM" ) ),
					Key.of( "OUT" )
				),

				// Method
				"println",

				// Arguments
				new Object[] {

					Concat.invoke(
						context,
						context.scopeFindLOcal( Key.of( "GREETING" ) ),
                  " world"
					)

				}

      );


    }

  }

}